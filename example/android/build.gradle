// Top-level build file where you can add configuration options common to all sub-projects/modules.

// Fetch all dependencies upfront
task fetchDependencies() {
    description 'Download all dependencies to the Gradle cache'
    group 'android'
    doLast {
        project.rootProject.allprojects.each { subProject ->
            subProject.buildscript.configurations.each { config ->
                if (config.canBeResolved) {
                    config.files
                }
            }
            subProject.configurations.each { config ->
                if (config.canBeResolved) {
                    // DefaultLenientConfiguration$ArtifactResolveException
                    try {
                        config.files
                    } catch(e) {
                        println e
                    }
                }
            }
        }
    }
}

buildscript {
    def androidTestAppDir = "../../node_modules/react-native-test-app/android"
    apply from: "$androidTestAppDir/dependencies.gradle"

    // Mainly for Detox testing for using Next Storage
    // when building next, force using next storage
    if(gradle.startParameter.getTaskNames().contains("assembleNext")) {
        rootProject.setProperty("AsyncStorage_useNextStorage", "true")
    }
    Boolean nextStorageFlag = rootProject.hasProperty("AsyncStorage_useNextStorage") ? rootProject.properties["AsyncStorage_useNextStorage"] == "true" : false
    println("[Async Storage] Using Next storage: " + nextStorageFlag)

    repositories {
        google()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$androidPluginVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

allprojects {
    repositories {
        maven {
            url("$rootDir/../../node_modules/detox/Detox-android")
        }
    }
    afterEvaluate { project ->
        def androidExtension = project.extensions.findByName('android')

        if(androidExtension != null && project.name == 'app') {
            // android extension from test-app pacakge
            androidExtension.defaultConfig {
                ndk {
                    abiFilters 'arm64-v8a', 'x86', 'x86_64'
                }
            }

            androidExtension.signingConfigs {
                test {
                    storeFile file('debug.keystore')
                    storePassword 'android'
                    keyAlias 'androiddebugkey'
                    keyPassword 'android'
                }
            }
            androidExtension.buildTypes.release.signingConfig = androidExtension.signingConfigs.test
            androidExtension.buildTypes {
                next {
                    // this build type is used on CI (to have app with and without nextStorage)
                    initWith release
                    matchingFallbacks = ["debug", "release"]
                }
            }
            androidExtension.testBuildType = 'release'
            androidExtension.sourceSets.androidTest.java.srcDirs += "$rootDir/app/src/androidTest/java"
            if(System.getenv("CIRCLECI") == "true") {
                // explicitly apply NDK version available in CI image
                androidExtension.ndkVersion = "20.1.5948944"
            }
            project.dependencies {
                androidTestImplementation('com.wix:detox:+')

                def hermesDir = file('../../node_modules/hermes-engine/android').absolutePath
                nextImplementation files("$hermesDir/hermes-release.aar")
            }
        }
    }
}
